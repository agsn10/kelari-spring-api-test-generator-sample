// Generated by Kelari - API Test Generator
package com.example.demo.resource;

import static io.github.kelari.atg.util.DataLoadUtil.*;

import com.example.demo.matchers.IsJohnMatcher;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.time.Duration;
import java.util.HashMap;
import java.util.Map;
import org.hamcrest.Matchers;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.RepeatedTest;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.reactive.AutoConfigureWebTestClient;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
import org.springframework.core.io.Resource;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.test.web.reactive.server.WebTestClient;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.reactive.function.BodyInserters;
import org.springframework.web.reactive.function.client.ExchangeFilterFunction;
import reactor.core.publisher.Mono;

@SpringBootTest(
    webEnvironment = WebEnvironment.RANDOM_PORT
)
@AutoConfigureWebTestClient
public class ExampleResourceGeneratedTest {
  @Autowired
  private WebTestClient webTestClient;

  private String bearerToken = "";

  private MultiValueMap<String, HttpEntity<?>> buildMultipartData(Map<String, Object> data) {
    MultiValueMap<String, HttpEntity<?>> body = new LinkedMultiValueMap<>();
    for (Map.Entry<String, Object> entry : data.entrySet()) {
      String key = entry.getKey();
      Object value = entry.getValue();
      HttpHeaders headers = new HttpHeaders();
      if (value instanceof Resource || value instanceof byte[]) {
        headers.setContentType(MediaType.MULTIPART_FORM_DATA);
        HttpEntity<?> part = new HttpEntity<>(value, headers);
        body.add(key, part);
      } else {
        headers.setContentType(MediaType.TEXT_PLAIN);
        HttpEntity<String> part = new HttpEntity<>(safeString(value), headers);
        body.add(key, part);
      }
    }
    return body;
  }

  private static ExchangeFilterFunction logRequest() {
    return ExchangeFilterFunction.ofRequestProcessor(request -> {
            System.out.println("[REQUEST] ‚Üí " + request.method() + " " + request.url());
            request.headers().forEach((k, v) -> System.out.println("[HEADER] " + k + ": " + v));
            request.cookies().forEach((k, v) -> System.out.println("[COOKIE] " + k + ": " + v));
            // [BODY] Logging not implemented. Next release.
            return Mono.just(request);
        });
  }

  private static ExchangeFilterFunction logResponse() {
    return ExchangeFilterFunction.ofResponseProcessor(response -> {
            System.out.println("[RESPONSE] ‚Üê Status: " + response.statusCode());
            response.headers().asHttpHeaders()
                .forEach((k, v) -> System.out.println("[HEADER] " + k + ": " + v));
            return Mono.just(response);
        });
  }

  @BeforeEach
  public void authenticate() {
    if ("/api/auth/login".isEmpty()) {
      return;
    }
    Map<String, String> credentials = new HashMap<>();
    credentials.put("username", "admin");
    credentials.put("password", "admin");
    webTestClient.post()
                       .uri("/api/auth/login")
                       .contentType(MediaType.APPLICATION_JSON)
                       .body(Mono.just(credentials), Map.class)
                       .exchange()
                       .expectStatus()
                       .is2xxSuccessful()
                       .expectBody()
                       .jsonPath("$.token")
                       .value(token -> bearerToken = "Bearer " + token);
  }

  @RepeatedTest(5)
  @Timeout(5)
  @Order(1)
  @DisplayName("‚úÖ Should return 200 OK when 'id' is 200 and authenticated")
  public void getExample_200() {
    WebTestClient client = this.webTestClient
        	.mutate()
        	.filter(logRequest())
        	.filter(logResponse())
        	.responseTimeout(Duration.ofSeconds(5))
        	.build();
    Map<String, Object> data = getData("com.example.demo.data.GetExampleDataLoad200");
    client
        	.get()
        	.uri("/api/example/" + safeString(data.get("id"))  + "?filter=" + safeString(data.get("filter")))
        	.header("X-Custom-Header", safeString(data.get("X-Custom-Header")))
        	.header("Authorization", bearerToken)
        	.exchange()
        	.expectStatus().isOk()
        	.expectHeader().valueEquals("testName1", "testValue1", "testValue11")
        	.expectHeader().valueEquals("testName2", "testValue2")
        	.expectBody()
        	.jsonPath("$.optionalField").value(Matchers.nullValue())
        	.jsonPath("$.role").value(Matchers.not(Matchers.equalTo("Admin")))
        	.jsonPath("$.name").value(Matchers.equalTo("John"))
        	.jsonPath("$.score").value(Matchers.greaterThan(10))
        	.jsonPath("$.limit").value(Matchers.lessThan(100))
        	.jsonPath("$.message").value(Matchers.containsString("success"))
        	.jsonPath("$.mandatoryField").value(Matchers.notNullValue())
        	.jsonPath("$.username").value(Matchers.startsWith("user_"))
        	.jsonPath("$.email").value(Matchers.endsWith(".com"))
        	.jsonPath("$.roles").value(Matchers.hasItem("admin"))
        	.jsonPath("$.age").value(Matchers.instanceOf(Integer.class))
        	.jsonPath("$.grade").value(Matchers.anyOf(Matchers.equalTo("A"), Matchers.equalTo("B"), Matchers.equalTo("C")))
        	.jsonPath("$.name").value(new IsJohnMatcher());
  }

  @Test
  @Timeout(5)
  @Order(2)
  @DisplayName("‚ùå Should return 400 Bad Request when 'id' is 400")
  public void getExample_400() {
    Map<String, Object> data = getData("com.example.demo.data.GetExampleDataLoad400");
    webTestClient
        	.get()
        	.uri("/api/example/" + safeString(data.get("id"))  + "?filter=" + safeString(data.get("filter")))
        	.header("X-Custom-Header", safeString(data.get("X-Custom-Header")))
        	.header("Authorization", bearerToken)
        	.exchange()
        	.expectStatus().isBadRequest();
  }

  @Test
  @Timeout(3)
  @Order(3)
  @DisplayName("üõ°Ô∏è Should return 401 Unauthorized when Authorization header is missing")
  public void getExample_401() {
    Map<String, Object> data = getData("com.example.demo.data.GetExampleDataLoad401");
    webTestClient
        	.get()
        	.uri("/api/example/" + safeString(data.get("id"))  + "?filter=" + safeString(data.get("filter")))
        	.header("X-Custom-Header", safeString(data.get("X-Custom-Header")))
        	.exchange()
        	.expectStatus().isUnauthorized();
  }

  @Test
  @Timeout(5)
  @Order(4)
  @DisplayName("‚ùå Should return 404 Not Found when 'id' is 404")
  public void getExample_404() {
    Map<String, Object> data = getData("com.example.demo.data.GetExampleDataLoad404");
    webTestClient
        	.get()
        	.uri("/api/example/" + safeString(data.get("id"))  + "?filter=" + safeString(data.get("filter")))
        	.header("X-Custom-Header", safeString(data.get("X-Custom-Header")))
        	.header("Authorization", bearerToken)
        	.exchange()
        	.expectStatus().isNotFound();
  }

  @Test
  @Timeout(5)
  @Order(5)
  @DisplayName("‚ùå Should return 500 Internal Server Error for unhandled 'id'")
  public void getExample_500() {
    Map<String, Object> data = getData("com.example.demo.data.GetExampleDataLoad500");
    webTestClient
        	.get()
        	.uri("/api/example/" + safeString(data.get("id"))  + "?filter=" + safeString(data.get("filter")))
        	.header("X-Custom-Header", safeString(data.get("X-Custom-Header")))
        	.header("Authorization", bearerToken)
        	.exchange()
        	.expectStatus().is5xxServerError();
  }

  @Test
  @Timeout(5)
  @Order(6)
  @DisplayName("‚úÖ Should return 201 Created when Example name is '201'")
  public void createExample_201() {
    Map<String, Object> data = getData("com.example.demo.data.CreateExampleDataLoad201");
    com.example.demo.model.ExampleRequest request = (com.example.demo.model.ExampleRequest) data.get("request");
    webTestClient
        	.post()
        	.uri("/api/example")
        	.header("headers", safeString(data.get("headers")))
        	.header("Authorization", bearerToken)
        	.contentType(MediaType.APPLICATION_JSON)
        	.bodyValue(formatBody(request))
        	.exchange()
        	.expectStatus().isCreated();
  }

  @Test
  @Timeout(5)
  @Order(7)
  @DisplayName("‚ùå Should return 400 Bad Request when Example name is '400'")
  public void createExample_400() {
    Map<String, Object> data = getData("com.example.demo.data.CreateExampleDataLoad400");
    com.example.demo.model.ExampleRequest request = (com.example.demo.model.ExampleRequest) data.get("request");
    webTestClient
        	.post()
        	.uri("/api/example")
        	.header("headers", safeString(data.get("headers")))
        	.header("Authorization", bearerToken)
        	.contentType(MediaType.APPLICATION_JSON)
        	.bodyValue(formatBody(request))
        	.exchange()
        	.expectStatus().isBadRequest();
  }

  @Test
  @Timeout(3)
  @Order(8)
  @DisplayName("üõ°Ô∏è Should return 401 Unauthorized when Authorization header is missing")
  public void createExample_401() {
    Map<String, Object> data = getData("com.example.demo.data.CreateExampleDataLoad401");
    com.example.demo.model.ExampleRequest request = (com.example.demo.model.ExampleRequest) data.get("request");
    webTestClient
        	.post()
        	.uri("/api/example")
        	.header("headers", safeString(data.get("headers")))
        	.contentType(MediaType.APPLICATION_JSON)
        	.bodyValue(formatBody(request))
        	.exchange()
        	.expectStatus().isUnauthorized();
  }

  @Test
  @Timeout(5)
  @Order(9)
  @DisplayName("‚ùå Should return 404 Not Found when Example name is '404'")
  public void createExample_404() {
    Map<String, Object> data = getData("com.example.demo.data.CreateExampleDataLoad404");
    com.example.demo.model.ExampleRequest request = (com.example.demo.model.ExampleRequest) data.get("request");
    webTestClient
        	.post()
        	.uri("/api/example")
        	.header("headers", safeString(data.get("headers")))
        	.header("Authorization", bearerToken)
        	.contentType(MediaType.APPLICATION_JSON)
        	.bodyValue(formatBody(request))
        	.exchange()
        	.expectStatus().isNotFound();
  }

  @Test
  @Timeout(5)
  @Order(10)
  @DisplayName("‚ùå Should return 500 Internal Server Error when Example name is unexpected")
  public void createExample_500() {
    Map<String, Object> data = getData("com.example.demo.data.CreateExampleDataLoad500");
    com.example.demo.model.ExampleRequest request = (com.example.demo.model.ExampleRequest) data.get("request");
    webTestClient
        	.post()
        	.uri("/api/example")
        	.header("headers", safeString(data.get("headers")))
        	.header("Authorization", bearerToken)
        	.contentType(MediaType.APPLICATION_JSON)
        	.bodyValue(formatBody(request))
        	.exchange()
        	.expectStatus().is5xxServerError();
  }

  @Test
  @Timeout(5)
  @Order(11)
  @DisplayName("‚úÖ Should return 200 OK when Example ID is 200")
  public void updateExample_200() {
    Map<String, Object> data = getData("com.example.demo.data.UpdateExampleDataLoad200");
    com.example.demo.model.ExampleRequest request = (com.example.demo.model.ExampleRequest) data.get("request");
    webTestClient
        	.put()
        	.uri("/api/example/" + safeString(data.get("id")) )
        	.header("Authorization", bearerToken)
        	.contentType(MediaType.APPLICATION_JSON)
        	.bodyValue(formatBody(request))
        	.exchange()
        	.expectStatus().isOk();
  }

  @Test
  @Timeout(5)
  @Order(12)
  @DisplayName("‚ùå Should return 400 Bad Request when Example ID is 400")
  public void updateExample_400() {
    Map<String, Object> data = getData("com.example.demo.data.UpdateExampleDataLoad400");
    com.example.demo.model.ExampleRequest request = (com.example.demo.model.ExampleRequest) data.get("request");
    webTestClient
        	.put()
        	.uri("/api/example/" + safeString(data.get("id")) )
        	.header("Authorization", bearerToken)
        	.contentType(MediaType.APPLICATION_JSON)
        	.bodyValue(formatBody(request))
        	.exchange()
        	.expectStatus().isBadRequest();
  }

  @Test
  @Timeout(3)
  @Order(13)
  @DisplayName("üõ°Ô∏è Should return 401 Unauthorized when Authorization header is missing")
  public void updateExample_401() {
    Map<String, Object> data = getData("com.example.demo.data.UpdateExampleDataLoad401");
    com.example.demo.model.ExampleRequest request = (com.example.demo.model.ExampleRequest) data.get("request");
    webTestClient
        	.put()
        	.uri("/api/example/" + safeString(data.get("id")) )
        	.contentType(MediaType.APPLICATION_JSON)
        	.bodyValue(formatBody(request))
        	.exchange()
        	.expectStatus().isUnauthorized();
  }

  @Test
  @Timeout(5)
  @Order(14)
  @DisplayName("‚ùå Should return 404 Not Found when Example ID is 404")
  public void updateExample_404() {
    Map<String, Object> data = getData("com.example.demo.data.UpdateExampleDataLoad404");
    com.example.demo.model.ExampleRequest request = (com.example.demo.model.ExampleRequest) data.get("request");
    webTestClient
        	.put()
        	.uri("/api/example/" + safeString(data.get("id")) )
        	.header("Authorization", bearerToken)
        	.contentType(MediaType.APPLICATION_JSON)
        	.bodyValue(formatBody(request))
        	.exchange()
        	.expectStatus().isNotFound();
  }

  @Test
  @Timeout(5)
  @Order(15)
  @DisplayName("‚ùå Should return 500 Internal Server Error when Example ID is unexpected")
  public void updateExample_500() {
    Map<String, Object> data = getData("com.example.demo.data.UpdateExampleDataLoad500");
    com.example.demo.model.ExampleRequest request = (com.example.demo.model.ExampleRequest) data.get("request");
    webTestClient
        	.put()
        	.uri("/api/example/" + safeString(data.get("id")) )
        	.header("Authorization", bearerToken)
        	.contentType(MediaType.APPLICATION_JSON)
        	.bodyValue(formatBody(request))
        	.exchange()
        	.expectStatus().is5xxServerError();
  }

  @Test
  @Timeout(5)
  @Order(16)
  @DisplayName("‚úÖ Should return 200 OK when Example ID is 200")
  public void patchExample_200() {
    Map<String, Object> data = getData("com.example.demo.data.PatchExampleDataLoad200");
    java.util.Map<java.lang.String,java.lang.Object> updates = (java.util.Map<java.lang.String,java.lang.Object>) data.get("updates");
    webTestClient
        	.patch()
        	.uri("/api/example/" + safeString(data.get("id")) )
        	.header("Authorization", bearerToken)
        	.contentType(MediaType.APPLICATION_JSON)
        	.bodyValue(formatBody(updates))
        	.exchange()
        	.expectStatus().isOk();
  }

  @Test
  @Timeout(5)
  @Order(17)
  @DisplayName("‚ùå Should return 400 Bad Request when Example ID is 400")
  public void patchExample_400() {
    Map<String, Object> data = getData("com.example.demo.data.PatchExampleDataLoad400");
    java.util.Map<java.lang.String,java.lang.Object> updates = (java.util.Map<java.lang.String,java.lang.Object>) data.get("updates");
    webTestClient
        	.patch()
        	.uri("/api/example/" + safeString(data.get("id")) )
        	.header("Authorization", bearerToken)
        	.contentType(MediaType.APPLICATION_JSON)
        	.bodyValue(formatBody(updates))
        	.exchange()
        	.expectStatus().isBadRequest();
  }

  @Test
  @Timeout(3)
  @Order(18)
  @DisplayName("üõ°Ô∏è Should return 401 Unauthorized when Authorization header is missing")
  public void patchExample_401() {
    Map<String, Object> data = getData("com.example.demo.data.PatchExampleDataLoad401");
    java.util.Map<java.lang.String,java.lang.Object> updates = (java.util.Map<java.lang.String,java.lang.Object>) data.get("updates");
    webTestClient
        	.patch()
        	.uri("/api/example/" + safeString(data.get("id")) )
        	.contentType(MediaType.APPLICATION_JSON)
        	.bodyValue(formatBody(updates))
        	.exchange()
        	.expectStatus().isUnauthorized();
  }

  @Test
  @Timeout(5)
  @Order(19)
  @DisplayName("‚ùå Should return 404 Not Found when Example ID is 404")
  public void patchExample_404() {
    Map<String, Object> data = getData("com.example.demo.data.PatchExampleDataLoad404");
    java.util.Map<java.lang.String,java.lang.Object> updates = (java.util.Map<java.lang.String,java.lang.Object>) data.get("updates");
    webTestClient
        	.patch()
        	.uri("/api/example/" + safeString(data.get("id")) )
        	.header("Authorization", bearerToken)
        	.contentType(MediaType.APPLICATION_JSON)
        	.bodyValue(formatBody(updates))
        	.exchange()
        	.expectStatus().isNotFound();
  }

  @Test
  @Timeout(5)
  @Order(20)
  @DisplayName("‚ùå Should return 500 Internal Server Error when Example ID is unexpected")
  public void patchExample_500() {
    Map<String, Object> data = getData("com.example.demo.data.PatchExampleDataLoad500");
    java.util.Map<java.lang.String,java.lang.Object> updates = (java.util.Map<java.lang.String,java.lang.Object>) data.get("updates");
    webTestClient
        	.patch()
        	.uri("/api/example/" + safeString(data.get("id")) )
        	.header("Authorization", bearerToken)
        	.contentType(MediaType.APPLICATION_JSON)
        	.bodyValue(formatBody(updates))
        	.exchange()
        	.expectStatus().is5xxServerError();
  }

  @Test
  @Timeout(5)
  @Order(21)
  @DisplayName("‚úÖ Should return 204 No Content when Example ID is 204")
  public void deleteExample_204() {
    Map<String, Object> data = getData("com.example.demo.data.DeleteExampleDataLoad204");
    webTestClient
        	.delete()
        	.uri("/api/example/" + safeString(data.get("id"))  + "?hardDelete=" + safeString(data.get("hardDelete")))
        	.header("Authorization", bearerToken)
        	.exchange()
        	.expectStatus().isNoContent();
  }

  @Test
  @Timeout(5)
  @Order(22)
  @DisplayName("‚ùå Should return 400 Bad Request when Example ID is 400")
  public void deleteExample_400() {
    Map<String, Object> data = getData("com.example.demo.data.DeleteExampleDataLoad400");
    webTestClient
        	.delete()
        	.uri("/api/example/" + safeString(data.get("id"))  + "?hardDelete=" + safeString(data.get("hardDelete")))
        	.header("Authorization", bearerToken)
        	.exchange()
        	.expectStatus().isBadRequest();
  }

  @Test
  @Timeout(3)
  @Order(23)
  @DisplayName("üõ°Ô∏è Should return 401 Unauthorized when Authorization header is missing")
  public void deleteExample_401() {
    Map<String, Object> data = getData("com.example.demo.data.DeleteExampleDataLoad401");
    webTestClient
        	.delete()
        	.uri("/api/example/" + safeString(data.get("id"))  + "?hardDelete=" + safeString(data.get("hardDelete")))
        	.exchange()
        	.expectStatus().isUnauthorized();
  }

  @Test
  @Timeout(5)
  @Order(24)
  @DisplayName("‚ùå Should return 404 Not Found when Example ID is 404")
  public void deleteExample_404() {
    Map<String, Object> data = getData("com.example.demo.data.DeleteExampleDataLoad404");
    webTestClient
        	.delete()
        	.uri("/api/example/" + safeString(data.get("id"))  + "?hardDelete=" + safeString(data.get("hardDelete")))
        	.header("Authorization", bearerToken)
        	.exchange()
        	.expectStatus().isNotFound();
  }

  @Test
  @Timeout(5)
  @Order(25)
  @DisplayName("‚ùå Should return 500 Internal Server Error when Example ID is unexpected")
  public void deleteExample_500() {
    Map<String, Object> data = getData("com.example.demo.data.DeleteExampleDataLoad500");
    webTestClient
        	.delete()
        	.uri("/api/example/" + safeString(data.get("id"))  + "?hardDelete=" + safeString(data.get("hardDelete")))
        	.header("Authorization", bearerToken)
        	.exchange()
        	.expectStatus().is5xxServerError();
  }

  @Test
  @Timeout(5)
  @Order(26)
  @DisplayName("‚úÖ Should return 200 OK when name is '200' and file is uploaded successfully")
  public void uploadExample_200() {
    Map<String, Object> data = getData("com.example.demo.data.UpdateExampleUploadDataLoad200");
    webTestClient
        	.post()
        	.uri("/api/example/upload")
        	.header("Authorization", bearerToken)
        	.contentType(MediaType.MULTIPART_FORM_DATA)
        	.body(BodyInserters.fromMultipartData(buildMultipartData(data)))
        	.exchange()
        	.expectStatus().isOk();
  }

  @Test
  @Timeout(5)
  @Order(27)
  @DisplayName("‚ùå Should return 400 Bad Request when name is '400' (invalid input)")
  public void uploadExample_400() {
    Map<String, Object> data = getData("com.example.demo.data.UpdateExampleUploadDataLoad400");
    webTestClient
        	.post()
        	.uri("/api/example/upload")
        	.contentType(MediaType.MULTIPART_FORM_DATA)
        	.body(BodyInserters.fromMultipartData(buildMultipartData(data)))
        	.exchange()
        	.expectStatus().isBadRequest();
  }

  @Test
  @Timeout(3)
  @Order(28)
  @DisplayName("üõ°Ô∏è Should return 401 Unauthorized when Authorization header is missing")
  public void uploadExample_401() {
    Map<String, Object> data = getData("com.example.demo.data.UpdateExampleUploadDataLoad401");
    webTestClient
        	.post()
        	.uri("/api/example/upload")
        	.contentType(MediaType.MULTIPART_FORM_DATA)
        	.body(BodyInserters.fromMultipartData(buildMultipartData(data)))
        	.exchange()
        	.expectStatus().isUnauthorized();
  }

  @Test
  @Timeout(5)
  @Order(29)
  @DisplayName("‚ùå Should return 404 Not Found when name is '404' and resource does not exist")
  public void uploadExample_404() {
    Map<String, Object> data = getData("com.example.demo.data.UpdateExampleUploadDataLoad404");
    webTestClient
        	.post()
        	.uri("/api/example/upload")
        	.header("Authorization", bearerToken)
        	.contentType(MediaType.MULTIPART_FORM_DATA)
        	.body(BodyInserters.fromMultipartData(buildMultipartData(data)))
        	.exchange()
        	.expectStatus().isNotFound();
  }

  @Test
  @Timeout(5)
  @Order(30)
  @DisplayName("‚ùå Should return 500 Internal Server Error for unknown name")
  public void uploadExample_500() {
    Map<String, Object> data = getData("com.example.demo.data.UpdateExampleUploadDataLoad500");
    webTestClient
        	.post()
        	.uri("/api/example/upload")
        	.header("Authorization", bearerToken)
        	.contentType(MediaType.MULTIPART_FORM_DATA)
        	.body(BodyInserters.fromMultipartData(buildMultipartData(data)))
        	.exchange()
        	.expectStatus().is5xxServerError();
  }

  @Test
  @Timeout(5)
  @Order(31)
  @DisplayName("‚úÖ Should return 200 OK when color matrix variable is '200'")
  public void getExampleWithMatrix_200() {
    Map<String, Object> data = getData("com.example.demo.data.GetExampleWithMatrixDataLoad200");
    webTestClient
        	.get()
        	.uri("/api/example/matrix/filters;color=" + safeString(data.get("color")) + ";size=" + safeString(data.get("size")) )
        	.header("Authorization", bearerToken)
        	.exchange()
        	.expectStatus().isOk();
  }

  @Test
  @Timeout(5)
  @Order(32)
  @DisplayName("‚ùå Should return 400 Bad Request when color matrix variable is '400'")
  public void getExampleWithMatrix_400() {
    Map<String, Object> data = getData("com.example.demo.data.GetExampleWithMatrixDataLoad400");
    webTestClient
        	.get()
        	.uri("/api/example/matrix/filters;color=" + safeString(data.get("color")) + ";size=" + safeString(data.get("size")) )
        	.header("Authorization", bearerToken)
        	.exchange()
        	.expectStatus().isBadRequest();
  }

  @Test
  @Timeout(3)
  @Order(33)
  @DisplayName("üõ°Ô∏è Should return 401 Unauthorized when Authorization header is missing")
  public void getExampleWithMatrix_401() {
    Map<String, Object> data = getData("com.example.demo.data.GetExampleWithMatrixDataLoad401");
    webTestClient
        	.get()
        	.uri("/api/example/matrix/filters;color=" + safeString(data.get("color")) + ";size=" + safeString(data.get("size")) )
        	.exchange()
        	.expectStatus().isUnauthorized();
  }

  @Test
  @Timeout(5)
  @Order(34)
  @DisplayName("‚ùå Should return 404 Not Found when color matrix variable is '404'")
  public void getExampleWithMatrix_404() {
    Map<String, Object> data = getData("com.example.demo.data.GetExampleWithMatrixDataLoad404");
    webTestClient
        	.get()
        	.uri("/api/example/matrix/filters;color=" + safeString(data.get("color")) + ";size=" + safeString(data.get("size")) )
        	.header("Authorization", bearerToken)
        	.exchange()
        	.expectStatus().isNotFound();
  }

  @Test
  @Timeout(5)
  @Order(35)
  @DisplayName("‚ùå Should return 500 Internal Server Error when color matrix variable is unexpected")
  public void getExampleWithMatrix_500() {
    Map<String, Object> data = getData("com.example.demo.data.GetExampleWithMatrixDataLoad500");
    webTestClient
        	.get()
        	.uri("/api/example/matrix/filters;color=" + safeString(data.get("color")) + ";size=" + safeString(data.get("size")) )
        	.header("Authorization", bearerToken)
        	.exchange()
        	.expectStatus().is5xxServerError();
  }

  @Test
  @Timeout(5)
  @Order(36)
  @DisplayName("‚úÖ Should return 200 OK when ID is 200 and Authorization is present")
  public void getExampleWithCookie_200() {
    Map<String, Object> data = getData("com.example.demo.data.GetExampleWithCookieDataLoad200");
    webTestClient
        	.get()
        	.uri("/api/example/cookie/" + safeString(data.get("id"))  + "?filter=" + safeString(data.get("filter")))
        	.header("X-Custom-Header", safeString(data.get("X-Custom-Header")))
        	.header("Authorization", bearerToken)
        	.cookie("sessionId", safeString(data.get("sessionId")))
        	.exchange()
        	.expectStatus().isOk();
  }

  @Test
  @Timeout(5)
  @Order(37)
  @DisplayName("‚ùå Should return 400 Bad Request when ID is 400")
  public void getExampleWithCookie_400() {
    Map<String, Object> data = getData("com.example.demo.data.GetExampleWithCookieDataLoad400");
    webTestClient
        	.get()
        	.uri("/api/example/cookie/" + safeString(data.get("id"))  + "?filter=" + safeString(data.get("filter")))
        	.header("X-Custom-Header", safeString(data.get("X-Custom-Header")))
        	.header("Authorization", bearerToken)
        	.cookie("sessionId", safeString(data.get("sessionId")))
        	.exchange()
        	.expectStatus().isBadRequest();
  }

  @Test
  @Timeout(3)
  @Order(38)
  @DisplayName("üõ°Ô∏è Should return 401 Unauthorized when Authorization header is missing")
  public void getExampleWithCookie_401() {
    Map<String, Object> data = getData("com.example.demo.data.GetExampleWithCookieDataLoad401");
    webTestClient
        	.get()
        	.uri("/api/example/cookie/" + safeString(data.get("id"))  + "?filter=" + safeString(data.get("filter")))
        	.header("X-Custom-Header", safeString(data.get("X-Custom-Header")))
        	.cookie("sessionId", safeString(data.get("sessionId")))
        	.exchange()
        	.expectStatus().isUnauthorized();
  }

  @Test
  @Timeout(5)
  @Order(39)
  @DisplayName("‚ùå Should return 404 Not Found when ID is 404")
  public void getExampleWithCookie_404() {
    Map<String, Object> data = getData("com.example.demo.data.GetExampleWithCookieDataLoad404");
    webTestClient
        	.get()
        	.uri("/api/example/cookie/" + safeString(data.get("id"))  + "?filter=" + safeString(data.get("filter")))
        	.header("X-Custom-Header", safeString(data.get("X-Custom-Header")))
        	.header("Authorization", bearerToken)
        	.cookie("sessionId", safeString(data.get("sessionId")))
        	.exchange()
        	.expectStatus().isNotFound();
  }

  @Test
  @Timeout(5)
  @Order(40)
  @DisplayName("‚ùå Should return 500 Internal Server Error when ID is not handled")
  public void getExampleWithCookie_500() {
    Map<String, Object> data = getData("com.example.demo.data.GetExampleWithCookieDataLoad500");
    webTestClient
        	.get()
        	.uri("/api/example/cookie/" + safeString(data.get("id"))  + "?filter=" + safeString(data.get("filter")))
        	.header("X-Custom-Header", safeString(data.get("X-Custom-Header")))
        	.header("Authorization", bearerToken)
        	.cookie("sessionId", safeString(data.get("sessionId")))
        	.exchange()
        	.expectStatus().is5xxServerError();
  }
}
