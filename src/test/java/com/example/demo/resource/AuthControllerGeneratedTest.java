// Generated by Kelari - API Test Generator
package com.example.demo.resource;

import static io.github.kelari.atg.util.DataLoadUtil.*;

import java.util.Map;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.reactive.AutoConfigureWebTestClient;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
import org.springframework.http.MediaType;
import org.springframework.test.web.reactive.server.WebTestClient;

@SpringBootTest(
    webEnvironment = WebEnvironment.RANDOM_PORT
)
@AutoConfigureWebTestClient
public class AuthControllerGeneratedTest {
  @Autowired
  private WebTestClient webTestClient;

  @Test
  @Order(1)
  @Timeout(5)
  @DisplayName("‚úÖ Should return 200 OK with a token when valid credentials are provided")
  public void login_200() {
    Map<String, Object> data = getData("com.example.demo.data.LoginDataLoad200");
    com.example.demo.model.LoginRequest loginRequest = (com.example.demo.model.LoginRequest) data.get("loginRequest");
    webTestClient
        	.post()
        	.uri("/api/auth/login")
        	.contentType(MediaType.APPLICATION_JSON)
        	.bodyValue(formatBody(loginRequest))
        	.exchange()
        	.expectStatus().isOk();
  }

  @Test
  @Order(2)
  @Timeout(3)
  @DisplayName("üõ°Ô∏è Should return 401 Unauthorized when invalid credentials are provided")
  public void login_401() {
    Map<String, Object> data = getData("com.example.demo.data.LoginDataLoad401");
    com.example.demo.model.LoginRequest loginRequest = (com.example.demo.model.LoginRequest) data.get("loginRequest");
    webTestClient
        	.post()
        	.uri("/api/auth/login")
        	.contentType(MediaType.APPLICATION_JSON)
        	.bodyValue(formatBody(loginRequest))
        	.exchange()
        	.expectStatus().isUnauthorized();
  }
}
